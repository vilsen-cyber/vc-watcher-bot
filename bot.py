import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.types import Message, InputMediaPhoto, InputMediaVideo, InputMediaDocument
from aiogram.client.default import DefaultBotProperties
from config import API_TOKEN, WATCHLIST

# üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class TelegramMonitorBot:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∞–≥–µ–Ω—Ç—Å—Ç–≤"""
        self.bot = Bot(
            token=API_TOKEN,
            default=DefaultBotProperties(parse_mode=None)
        )
        self.dp = Dispatcher()
        self.media_groups = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø
        self.setup_handlers()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        @self.dp.message()
        async def handle_messages(message: Message):
            await self.process_message(message)

    async def process_message(self, message: Message):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∞–≥–µ–Ω—Ç—Å—Ç–≤
        
        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram
        """
        try:
            # –ï—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞, —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –º–µ–¥–∏–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            if message.media_group_id:
                await self.handle_media_group(message)
                return
                
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏ –∫ –º–µ–¥–∏–∞
            full_text = (message.caption or message.text or "").strip()
            
            if not full_text:
                return
                
            lower_text = full_text.lower()
            logger.info(f"‚ñ∂Ô∏è –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {full_text[:100]}...")

            # –ü–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∞–≥–µ–Ω—Ç—Å—Ç–≤ –≤ —Ç–µ–∫—Å—Ç–µ
            found_agencies = []
            for keyword, user_id in WATCHLIST.items():
                if keyword in lower_text:
                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: –µ—Å–ª–∏ –Ω–∞—à–ª–∏ "sofi", –Ω–æ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å "sofi art", —Ç–æ –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
                    if keyword == "sofi" and "sofi art" in lower_text:
                        continue
                    found_agencies.append((keyword, user_id))

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç—Å—Ç–≤
            for keyword, user_id in found_agencies:
                await self.send_notification(message, keyword, user_id, full_text)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def handle_media_group(self, message: Message):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã –º–µ–¥–∏–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)
        """
        media_group_id = message.media_group_id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
        if media_group_id not in self.media_groups:
            self.media_groups[media_group_id] = {
                'messages': [],
                'caption': '',
                'processed': False
            }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        self.media_groups[media_group_id]['messages'].append(message)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å—å (–æ–±—ã—á–Ω–æ —Ç–æ–ª—å–∫–æ —É –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
        if message.caption and not self.media_groups[media_group_id]['caption']:
            self.media_groups[media_group_id]['caption'] = message.caption
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        import asyncio
        await asyncio.sleep(0.5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –ª–∏ —É–∂–µ —ç—Ç—É –≥—Ä—É–ø–ø—É
        if self.media_groups[media_group_id]['processed']:
            return
            
        # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
        self.media_groups[media_group_id]['processed'] = True
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É
        if media_group_id:
            await self.process_media_group(media_group_id)

    async def process_media_group(self, media_group_id: str):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –º–µ–¥–∏–∞
        """
        group_data = self.media_groups[media_group_id]
        messages = group_data['messages']
        full_text = group_data['caption'] or ''
        
        if not full_text.strip():
            # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
            del self.media_groups[media_group_id]
            return
            
        lower_text = full_text.lower()
        logger.info(f"‚ñ∂Ô∏è –ü–æ–ª—É—á–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –º–µ–¥–∏–∞ —Å —Ç–µ–∫—Å—Ç–æ–º: {full_text[:100]}...")

        # –ü–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∞–≥–µ–Ω—Ç—Å—Ç–≤ –≤ —Ç–µ–∫—Å—Ç–µ
        found_agencies = []
        for keyword, user_id in WATCHLIST.items():
            if keyword in lower_text:
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: –µ—Å–ª–∏ –Ω–∞—à–ª–∏ "sofi", –Ω–æ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å "sofi art", —Ç–æ –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
                if keyword == "sofi" and "sofi art" in lower_text:
                    continue
                found_agencies.append((keyword, user_id))

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç—Å—Ç–≤
        for keyword, user_id in found_agencies:
            await self.send_media_group_notification(messages, keyword, user_id, full_text)
        
        # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
        del self.media_groups[media_group_id]

    async def send_notification(self, message: Message, keyword: str, user_id: int, full_text: str):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏
        
        Args:
            message: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            keyword: –ù–∞–π–¥–µ–Ω–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            full_text: –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        try:
            agency_display = keyword.title()
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            content = (
                f"üö® –ù–∞—Ä—É—à–µ–Ω–∏–µ\n"
                f'"{full_text.strip()}"'
            )

            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {agency_display} ‚Üí {user_id}")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if message.photo:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
                await self.bot.send_photo(
                    chat_id=user_id,
                    photo=message.photo[-1].file_id,
                    caption=content
                )
            elif message.video:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é
                await self.bot.send_video(
                    chat_id=user_id,
                    video=message.video.file_id,
                    caption=content
                )
            elif message.document:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–¥–ø–∏—Å—å—é
                await self.bot.send_document(
                    chat_id=user_id,
                    document=message.document.file_id,
                    caption=content
                )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self.bot.send_message(
                    chat_id=user_id,
                    text=content
                )
                
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {agency_display}")

        except Exception as e:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {keyword}: {e}")

    async def send_media_group_notification(self, messages: list, keyword: str, user_id: int, full_text: str):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –≥—Ä—É–ø–ø–æ–π –º–µ–¥–∏–∞
        """
        try:
            agency_display = keyword.title()
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            content = (
                f"üö® –ù–∞—Ä—É—à–µ–Ω–∏–µ\n"
                f'"{full_text.strip()}"'
            )

            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–≥—Ä—É–ø–ø–∞ {len(messages)} –º–µ–¥–∏–∞) {agency_display} ‚Üí {user_id}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—É –º–µ–¥–∏–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            media_list = []
            for i, msg in enumerate(messages):
                if msg.photo:
                    media = InputMediaPhoto(
                        media=msg.photo[-1].file_id,
                        caption=content if i == 0 else None  # –ü–æ–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
                    )
                    media_list.append(media)
                elif msg.video:
                    media = InputMediaVideo(
                        media=msg.video.file_id,
                        caption=content if i == 0 else None
                    )
                    media_list.append(media)
                elif msg.document:
                    media = InputMediaDocument(
                        media=msg.document.file_id,
                        caption=content if i == 0 else None
                    )
                    media_list.append(media)
            
            if media_list:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –º–µ–¥–∏–∞
                await self.bot.send_media_group(
                    chat_id=user_id,
                    media=media_list
                )
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await self.bot.send_message(
                    chat_id=user_id,
                    text=content
                )
                
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –≥—Ä—É–ø–ø–æ–π –º–µ–¥–∏–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {agency_display}")

        except Exception as e:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {keyword}: {e}")

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        try:
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")
        await self.bot.session.close()